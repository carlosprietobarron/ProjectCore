{"ast":null,"code":"import HttpClient from \"../services/HttpClient\";\n\n// export const userRegister = (user) =>{\n//     return new Promise((resolve,reject) => {\n//         HttpClient.post('/user/Signup',user);\n//     })\n// }\n\nexport const userRegister = async user => {\n  try {\n    const response = await HttpClient.post('/user/Signup', user);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getCurrentUser = async dispatch => {\n  try {\n    const response = await HttpClient.get('/user');\n\n    // Validar que la respuesta tenga la estructura esperada\n    if (!(response !== null && response !== void 0 && response.data)) {\n      throw new Error('Invalid response format');\n    }\n    dispatch({\n      type: 'startSession',\n      user: response.data,\n      authenticated: true\n    });\n    return response;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    // Mejor manejo de errores\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Error getting user';\n    dispatch({\n      type: 'sessionError',\n      error: errorMessage\n    });\n    throw error;\n  }\n};\nexport const loginUser = async user => {\n  try {\n    const response = await HttpClient.post('/user/login', user);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const updatetUser = async user => {\n  try {\n    const response = await genericRequest.put('/user', user);\n    return response;\n  } catch (error) {\n    // Devuelve el error de la respuesta si existe; de lo contrario, el mensaje general del error\n    return error.response ? error.response : {\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["HttpClient","userRegister","user","response","post","error","getCurrentUser","dispatch","get","data","Error","type","authenticated","_error$response","_error$response$data","errorMessage","message","loginUser","updatetUser","genericRequest","put"],"sources":["/Users/carlosprieto/NET/ProjectCore/cursos-online-app/src/actions/userActions.js"],"sourcesContent":["import HttpClient from \"../services/HttpClient\";\n\n// export const userRegister = (user) =>{\n//     return new Promise((resolve,reject) => {\n//         HttpClient.post('/user/Signup',user);\n//     })\n// }\n\nexport const userRegister = async (user) => {\n    try {\n        const response = await HttpClient.post('/user/Signup', user);\n        return response;\n    } catch (error) {\n        throw error;\n    }\n}\n\n\n\nexport const getCurrentUser = async (dispatch) => {\n    try {\n        const response = await HttpClient.get('/user');\n        \n        // Validar que la respuesta tenga la estructura esperada\n        if (!response?.data) {\n            throw new Error('Invalid response format');\n        }\n        \n        dispatch({\n            type: 'startSession',\n            user: response.data,\n            authenticated: true\n        });\n        \n        return response;\n    } catch (error) {\n        // Mejor manejo de errores\n        const errorMessage = error.response?.data?.message || error.message || 'Error getting user';\n        dispatch({\n            type: 'sessionError',\n            error: errorMessage\n        });\n        throw error;\n    }\n}\n\nexport const loginUser = async user => {\n    try {\n        const response = await HttpClient.post('/user/login', user);\n        \n        return response;\n        \n    } catch (error) {\n        throw error;\n    }\n}\n\nexport const updatetUser = async (user) => {\n    try {\n        const response = await genericRequest.put('/user', user);\n        return response;\n    } catch (error) {\n        // Devuelve el error de la respuesta si existe; de lo contrario, el mensaje general del error\n        return error.response ? error.response : { message: error.message };\n    }\n};\n\n\n\n\n\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,wBAAwB;;AAE/C;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAI,IAAK;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,IAAI,CAAC,cAAc,EAAEF,IAAI,CAAC;IAC5D,OAAOC,QAAQ;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CAAC;AAID,OAAO,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACA,MAAMJ,QAAQ,GAAG,MAAMH,UAAU,CAACQ,GAAG,CAAC,OAAO,CAAC;;IAE9C;IACA,IAAI,EAACL,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEM,IAAI,GAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEAH,QAAQ,CAAC;MACLI,IAAI,EAAE,cAAc;MACpBT,IAAI,EAAEC,QAAQ,CAACM,IAAI;MACnBG,aAAa,EAAE;IACnB,CAAC,CAAC;IAEF,OAAOT,QAAQ;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA,IAAAQ,eAAA,EAAAC,oBAAA;IACZ;IACA,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAAR,KAAK,CAACF,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAIX,KAAK,CAACW,OAAO,IAAI,oBAAoB;IAC3FT,QAAQ,CAAC;MACLI,IAAI,EAAE,cAAc;MACpBN,KAAK,EAAEU;IACX,CAAC,CAAC;IACF,MAAMV,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMY,SAAS,GAAG,MAAMf,IAAI,IAAI;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,IAAI,CAAC,aAAa,EAAEF,IAAI,CAAC;IAE3D,OAAOC,QAAQ;EAEnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMa,WAAW,GAAG,MAAOhB,IAAI,IAAK;EACvC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMgB,cAAc,CAACC,GAAG,CAAC,OAAO,EAAElB,IAAI,CAAC;IACxD,OAAOC,QAAQ;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ;IACA,OAAOA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,GAAG;MAAEa,OAAO,EAAEX,KAAK,CAACW;IAAQ,CAAC;EACvE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}